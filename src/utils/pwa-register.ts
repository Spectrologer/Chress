/**
 * PWA Registration and Update Handler
 * Registers the service worker and handles updates
 */

/**
 * Register the service worker
 */
export async function registerServiceWorker(): Promise<ServiceWorkerRegistration | null> {
  if (!('serviceWorker' in navigator)) {
    console.log('[PWA] Service workers are not supported');
    return null;
  }

  try {
    // Determine the correct path based on environment
    const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    const swPath = isDevelopment ? '/dev-sw.js?dev-sw' : '/Chress/sw.js';
    const swScope = isDevelopment ? '/' : '/Chress/';

    // Register the service worker generated by Vite PWA
    const registration = await navigator.serviceWorker.register(swPath, {
      scope: swScope,
      type: isDevelopment ? 'module' : 'classic'
    });

    console.log('[PWA] Service worker registered:', registration.scope);

    // Check for updates periodically
    setInterval(() => {
      registration.update();
    }, 60 * 60 * 1000); // Check every hour

    // Handle updates
    registration.addEventListener('updatefound', () => {
      const newWorker = registration.installing;

      if (newWorker) {
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // New service worker installed, show update notification
            showUpdateNotification();
          }
        });
      }
    });

    return registration;
  } catch (error) {
    console.error('[PWA] Service worker registration failed:', error);
    return null;
  }
}

/**
 * Show update notification to user
 */
function showUpdateNotification(): void {
  const notification = document.createElement('div');
  notification.id = 'pwa-update-notification';
  notification.innerHTML = `
    <div style="
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: linear-gradient(135deg, #5a3a52 0%, #6a4a62 100%);
      color: #f4e8f0;
      padding: 16px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
      z-index: 10000;
      max-width: 350px;
      font-family: 'Courier New', monospace;
      border: 2px solid #8a6a82;
    ">
      <h3 style="margin: 0 0 8px 0; font-size: 16px;">Update Available</h3>
      <p style="margin: 0 0 12px 0; font-size: 14px;">A new version of Chress is available!</p>
      <div style="display: flex; gap: 8px;">
        <button id="pwa-update-button" style="
          flex: 1;
          padding: 8px 16px;
          background: linear-gradient(135deg, #7a5a72 0%, #8a6a82 100%);
          color: #f4e8f0;
          border: 1px solid #b8a0b0;
          border-radius: 4px;
          cursor: pointer;
          font-size: 14px;
          font-family: inherit;
        ">Update Now</button>
        <button id="pwa-dismiss-button" style="
          padding: 8px 16px;
          background: transparent;
          color: #f4e8f0;
          border: 1px solid #8a6a82;
          border-radius: 4px;
          cursor: pointer;
          font-size: 14px;
          font-family: inherit;
        ">Later</button>
      </div>
    </div>
  `;

  document.body.appendChild(notification);

  // Update button handler
  document.getElementById('pwa-update-button')?.addEventListener('click', () => {
    // Tell service worker to skip waiting
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({ type: 'SKIP_WAITING' });
    }
    window.location.reload();
  });

  // Dismiss button handler
  document.getElementById('pwa-dismiss-button')?.addEventListener('click', () => {
    notification.remove();
  });
}

/**
 * Check if app is running as PWA
 */
export function isPWA(): boolean {
  return window.matchMedia('(display-mode: standalone)').matches ||
         (window.navigator as any).standalone === true;
}

/**
 * Show install prompt if available
 */
export function setupInstallPrompt(): void {
  let deferredPrompt: any;

  window.addEventListener('beforeinstallprompt', (e: Event) => {
    // Prevent the default prompt
    e.preventDefault();
    deferredPrompt = e;

    // Show custom install button/banner
    showInstallBanner(deferredPrompt);
  });

  window.addEventListener('appinstalled', () => {
    console.log('[PWA] App installed successfully');
    deferredPrompt = null;

    // Hide install banner
    const banner = document.getElementById('pwa-install-banner');
    if (banner) {
      banner.remove();
    }
  });
}

/**
 * Show custom install banner
 */
function showInstallBanner(deferredPrompt: any): void {
  // Don't show if already installed
  if (isPWA()) {
    return;
  }

  // Don't show if user dismissed recently
  const dismissed = localStorage.getItem('pwa-install-dismissed');
  if (dismissed && Date.now() - parseInt(dismissed) < 7 * 24 * 60 * 60 * 1000) {
    return; // Wait 7 days
  }

  const banner = document.createElement('div');
  banner.id = 'pwa-install-banner';
  banner.innerHTML = `
    <div style="
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: linear-gradient(135deg, #5a3a52 0%, #6a4a62 100%);
      color: #f4e8f0;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
      z-index: 10000;
      display: flex;
      align-items: center;
      gap: 16px;
      font-family: 'Courier New', monospace;
      border: 2px solid #8a6a82;
    ">
      <span style="font-size: 14px;">Install Chress for offline play!</span>
      <button id="pwa-install-button" style="
        padding: 6px 16px;
        background: linear-gradient(135deg, #7a5a72 0%, #8a6a82 100%);
        color: #f4e8f0;
        border: 1px solid #b8a0b0;
        border-radius: 4px;
        cursor: pointer;
        font-size: 13px;
        font-family: inherit;
      ">Install</button>
      <button id="pwa-install-dismiss" style="
        padding: 6px 12px;
        background: transparent;
        color: #f4e8f0;
        border: none;
        cursor: pointer;
        font-size: 18px;
      ">Ã—</button>
    </div>
  `;

  document.body.appendChild(banner);

  // Install button handler
  document.getElementById('pwa-install-button')?.addEventListener('click', async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      console.log('[PWA] Install prompt outcome:', outcome);

      if (outcome === 'accepted') {
        banner.remove();
      }
    }
  });

  // Dismiss button handler
  document.getElementById('pwa-install-dismiss')?.addEventListener('click', () => {
    localStorage.setItem('pwa-install-dismissed', Date.now().toString());
    banner.remove();
  });
}

/**
 * Initialize PWA features
 */
export async function initializePWA(): Promise<void> {
  console.log('[PWA] Initializing...');

  // Register service worker
  await registerServiceWorker();

  // Setup install prompt
  setupInstallPrompt();

  // Log PWA status
  if (isPWA()) {
    console.log('[PWA] Running as installed PWA');
  } else {
    console.log('[PWA] Running in browser');
  }

  // Handle online/offline events
  window.addEventListener('online', () => {
    console.log('[PWA] Back online');
    showConnectionStatus('online');
  });

  window.addEventListener('offline', () => {
    console.log('[PWA] Gone offline');
    showConnectionStatus('offline');
  });
}

/**
 * Show connection status notification
 */
function showConnectionStatus(status: 'online' | 'offline'): void {
  const existing = document.getElementById('connection-status');
  if (existing) {
    existing.remove();
  }

  const notification = document.createElement('div');
  notification.id = 'connection-status';
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 24px;
    background: ${status === 'online' ? '#4CAF50' : '#f44336'};
    color: white;
    border-radius: 6px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    z-index: 10000;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    animation: slideDown 0.3s ease-out;
  `;
  notification.textContent = status === 'online' ? 'Back Online' : 'Offline Mode';

  document.body.appendChild(notification);

  // Remove after 3 seconds
  setTimeout(() => {
    notification.style.animation = 'slideUp 0.3s ease-out';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// Add animations
const style = document.createElement('style');
style.textContent = `
  @keyframes slideDown {
    from {
      transform: translate(-50%, -100%);
      opacity: 0;
    }
    to {
      transform: translate(-50%, 0);
      opacity: 1;
    }
  }
  @keyframes slideUp {
    from {
      transform: translate(-50%, 0);
      opacity: 1;
    }
    to {
      transform: translate(-50%, -100%);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);
