/**
 * TypeChecks - Standardized type checking utilities for the Chress codebase
 *
 * ⚠️  THIS FILE IS AUTO-GENERATED - DO NOT EDIT DIRECTLY
 * Generated by: utils/generateTypeChecks.js
 * To modify: Edit the configuration in generateTypeChecks.js and regenerate
 *
 * PROBLEM SOLVED:
 * This module eliminates inconsistent type checking patterns throughout the codebase.
 *
 * RECOMMENDED USAGE:
 * ✅ GOOD: TileTypeChecker.isBomb(tile), TileTypeChecker.isTileObject(tile)
 * ✅ GOOD: EntityTypeChecker.isPenne(tile), EntityTypeChecker.isNPC(tile)
 * ❌ BAD:  typeof tile === 'object' && tile !== null && tile.type === TILE_TYPES.BOMB
 * ❌ BAD:  tile === TILE_TYPES.BOMB (when tile could be an object)
 */

import { TILE_TYPES, TileType } from '../core/constants/index.ts';

/**
 * A tile can be either a primitive number (tile type) or an object with a type property
 */
export type Tile = number | { type: number; [key: string]: any } | null | undefined;

// ========================================
// TILE TYPE CHECKER CLASS
// ========================================

/**
 * TileTypeChecker - Handles all tile-related type checking
 * Includes terrain, items, structures, and interactive objects
 */
export class TileTypeChecker {
    // ========================================
    // CORE TYPE UTILITIES
    // ========================================

    /**
     * Normalizes a tile to its type value.
     * Handles both primitive tile types (numbers) and tile objects.
     */
    static getTileType(tile: Tile): number | undefined {
        if (tile === null || tile === undefined) {
            return undefined;
        }

        if (typeof tile === 'object') {
            return tile.type;
        }

        return tile;
    }

    /**
     * Checks if a tile is a valid tile object (not just a primitive type).
     * Type guard for tile objects.
     */
    static isTileObject(tile: any): tile is { type: number; [key: string]: any } {
        return tile !== null && typeof tile === 'object' && tile.type !== undefined;
    }

    /**
     * Checks if a tile has the specified type.
     * Handles both primitive tiles and tile objects seamlessly.
     */
    static isTileType(tile: Tile, tileType: number): boolean {
        return TileTypeChecker.getTileType(tile) === tileType;
    }

    /**
     * Checks if a value is a valid tile (either primitive or object).
     */
    static isValidTile(tile: any): tile is Tile {
        return TileTypeChecker.getTileType(tile) !== undefined;
    }

    // ========================================
    // SPECIFIC TILE TYPE CHECKERS (GENERATED)
    // ========================================
    static isFloor(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.FLOOR);
    }

    static isWall(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.WALL);
    }

    static isGrass(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.GRASS);
    }

    static isExit(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.EXIT);
    }

    static isRock(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.ROCK);
    }

    static isHouse(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.HOUSE);
    }

    static isShack(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SHACK);
    }

    static isWater(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.WATER);
    }

    static isFood(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.FOOD);
    }

    static isShrubbery(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SHRUBBERY);
    }

    static isWell(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.WELL);
    }

    static isDeadTree(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.DEADTREE);
    }

    static isAxe(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.AXE);
    }

    static isHammer(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.HAMMER);
    }

    static isBishopSpear(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BISHOP_SPEAR);
    }

    static isBow(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOW);
    }

    static isShovel(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SHOVEL);
    }

    static isBomb(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOMB);
    }

    static isHeart(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.HEART);
    }

    static isNote(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.NOTE);
    }

    static isBookOfTimeTravel(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOOK_OF_TIME_TRAVEL);
    }

    static isHorseIcon(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.HORSE_ICON);
    }

    static isSign(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SIGN);
    }

    static isPort(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.PORT);
    }

    static isCistern(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.CISTERN);
    }

    static isPitfall(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.PITFALL);
    }

    static isTable(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.TABLE);
    }

    static isBombStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOMB_STATUE);
    }

    static isSpearStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SPEAR_STATUE);
    }

    static isBowStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOW_STATUE);
    }

    static isHorseStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.HORSE_STATUE);
    }

    static isBookStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.BOOK_STATUE);
    }

    static isShovelStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SHOVEL_STATUE);
    }

    // ========================================
    // CATEGORY CHECKERS
    // ========================================

    /**
     * Checks if a tile is walkable (not blocking movement).
     */
    static isWalkable(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type !== TILE_TYPES.WALL &&
               type !== TILE_TYPES.ROCK &&
               type !== TILE_TYPES.HOUSE &&
               type !== TILE_TYPES.SHACK &&
               type !== TILE_TYPES.SIGN;
    }

    /**
     * Checks if a tile is a collectible item.
     */
    static isItem(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type === TILE_TYPES.AXE ||
               type === TILE_TYPES.HAMMER ||
               type === TILE_TYPES.BISHOP_SPEAR ||
               type === TILE_TYPES.HORSE_ICON ||
               type === TILE_TYPES.BOMB ||
               type === TILE_TYPES.HEART ||
               type === TILE_TYPES.WATER ||
               type === TILE_TYPES.FOOD ||
               type === TILE_TYPES.NOTE ||
               type === TILE_TYPES.BOOK_OF_TIME_TRAVEL ||
               type === TILE_TYPES.BOW ||
               type === TILE_TYPES.SHOVEL;
    }

    /**
     * Checks if a tile is choppable (requires axe).
     */
    static isChoppable(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type === TILE_TYPES.GRASS ||
               type === TILE_TYPES.SHRUBBERY;
    }

    /**
     * Checks if a tile is breakable (requires hammer).
     */
    static isBreakable(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type === TILE_TYPES.ROCK;
    }

    // ========================================
    // OBJECT PROPERTY HELPERS
    // ========================================

    /**
     * Safely gets a property from a tile object.
     */
    static getTileProperty<K extends string>(tile: Tile, property: K): any {
        if (TileTypeChecker.isTileObject(tile)) {
            return tile[property];
        }
        return undefined;
    }

    /**
     * Checks if a tile object has a specific property.
     */
    static hasTileProperty(tile: Tile, property: string): boolean {
        return TileTypeChecker.isTileObject(tile) && property in tile;
    }

    /**
     * Checks if a tile is an object with a specific type.
     * Type guard that narrows to tile object.
     */
    static isTileObjectOfType(tile: any, tileType: number): tile is { type: number; [key: string]: any } {
        return TileTypeChecker.isTileObject(tile) && tile.type === tileType;
    }

    /**
     * Checks if a tile object matches a type AND has a specific property value.
     */
    static isTileObjectWithProperty(tile: any, tileType: number, property: string, expectedValue: any): boolean {
        return TileTypeChecker.isTileObjectOfType(tile, tileType) && tile[property] === expectedValue;
    }
}

// ========================================
// ENTITY TYPE CHECKER CLASS
// ========================================

/**
 * EntityTypeChecker - Handles all entity-related type checking
 * Includes NPCs, enemies, and enemy statues
 */
export class EntityTypeChecker {
    static isPenne(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.PENNE);
    }

    static isSquig(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.SQUIG);
    }

    static isNib(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.NIB);
    }

    static isRune(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.RUNE);
    }

    static isCrayn(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.CRAYN);
    }

    static isFelt(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.FELT);
    }

    static isForge(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.FORGE);
    }

    static isMark(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.MARK);
    }

    static isAxolotl(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.AXELOTL);
    }

    static isGouge(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.GOUGE);
    }

    static isEnemy(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.ENEMY);
    }

    static isLizardyStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.LIZARDY_STATUE);
    }

    static isLizardoStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.LIZARDO_STATUE);
    }

    static isLizardeauxStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.LIZARDEAUX_STATUE);
    }

    static isZardStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.ZARD_STATUE);
    }

    static isLazerdStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.LAZERD_STATUE);
    }

    static isLizordStatue(tile: Tile): boolean {
        return TileTypeChecker.isTileType(tile, TILE_TYPES.LIZORD_STATUE);
    }

    /**
     * Checks if a tile is an NPC.
     */
    static isNPC(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type === TILE_TYPES.PENNE ||
               type === TILE_TYPES.SQUIG ||
               type === TILE_TYPES.NIB ||
               type === TILE_TYPES.RUNE ||
               type === TILE_TYPES.CRAYN ||
               type === TILE_TYPES.FELT ||
               type === TILE_TYPES.FORGE ||
               type === TILE_TYPES.MARK ||
               type === TILE_TYPES.AXELOTL ||
               type === TILE_TYPES.GOUGE;
    }

    /**
     * Checks if a tile is any type of enemy statue.
     */
    static isEnemyStatue(tile: Tile): boolean {
        const type = TileTypeChecker.getTileType(tile);
        return type === TILE_TYPES.LIZARDY_STATUE ||
               type === TILE_TYPES.LIZARDO_STATUE ||
               type === TILE_TYPES.LIZARDEAUX_STATUE ||
               type === TILE_TYPES.ZARD_STATUE ||
               type === TILE_TYPES.LAZERD_STATUE ||
               type === TILE_TYPES.LIZORD_STATUE;
    }
}

// ========================================
// COMBINED CHECKERS
// ========================================

/**
 * Checks if a tile is any type of statue (enemy or item).
 */
export function isStatue(tile: Tile): boolean {
    const type = TileTypeChecker.getTileType(tile);
    return type === TILE_TYPES.LIZARDY_STATUE ||
           type === TILE_TYPES.LIZARDO_STATUE ||
           type === TILE_TYPES.LIZARDEAUX_STATUE ||
           type === TILE_TYPES.ZARD_STATUE ||
           type === TILE_TYPES.LAZERD_STATUE ||
           type === TILE_TYPES.LIZORD_STATUE ||
           type === TILE_TYPES.BOMB_STATUE ||
           type === TILE_TYPES.SPEAR_STATUE ||
           type === TILE_TYPES.BOW_STATUE ||
           type === TILE_TYPES.HORSE_STATUE ||
           type === TILE_TYPES.BOOK_STATUE ||
           type === TILE_TYPES.SHOVEL_STATUE;
}

// ========================================
// BACKWARD COMPATIBILITY EXPORTS
// ========================================

// Core utilities
export const getTileType = TileTypeChecker.getTileType.bind(TileTypeChecker);
export const isTileObject = TileTypeChecker.isTileObject.bind(TileTypeChecker);
export const isTileType = TileTypeChecker.isTileType.bind(TileTypeChecker);
export const isValidTile = TileTypeChecker.isValidTile.bind(TileTypeChecker);

// Tile type checkers
export const isFloor = TileTypeChecker.isFloor.bind(TileTypeChecker);
export const isWall = TileTypeChecker.isWall.bind(TileTypeChecker);
export const isGrass = TileTypeChecker.isGrass.bind(TileTypeChecker);
export const isExit = TileTypeChecker.isExit.bind(TileTypeChecker);
export const isRock = TileTypeChecker.isRock.bind(TileTypeChecker);
export const isHouse = TileTypeChecker.isHouse.bind(TileTypeChecker);
export const isShack = TileTypeChecker.isShack.bind(TileTypeChecker);
export const isWater = TileTypeChecker.isWater.bind(TileTypeChecker);
export const isFood = TileTypeChecker.isFood.bind(TileTypeChecker);
export const isShrubbery = TileTypeChecker.isShrubbery.bind(TileTypeChecker);
export const isWell = TileTypeChecker.isWell.bind(TileTypeChecker);
export const isDeadTree = TileTypeChecker.isDeadTree.bind(TileTypeChecker);
export const isAxe = TileTypeChecker.isAxe.bind(TileTypeChecker);
export const isHammer = TileTypeChecker.isHammer.bind(TileTypeChecker);
export const isBishopSpear = TileTypeChecker.isBishopSpear.bind(TileTypeChecker);
export const isBow = TileTypeChecker.isBow.bind(TileTypeChecker);
export const isShovel = TileTypeChecker.isShovel.bind(TileTypeChecker);
export const isBomb = TileTypeChecker.isBomb.bind(TileTypeChecker);
export const isHeart = TileTypeChecker.isHeart.bind(TileTypeChecker);
export const isNote = TileTypeChecker.isNote.bind(TileTypeChecker);
export const isBookOfTimeTravel = TileTypeChecker.isBookOfTimeTravel.bind(TileTypeChecker);
export const isHorseIcon = TileTypeChecker.isHorseIcon.bind(TileTypeChecker);
export const isSign = TileTypeChecker.isSign.bind(TileTypeChecker);
export const isPort = TileTypeChecker.isPort.bind(TileTypeChecker);
export const isCistern = TileTypeChecker.isCistern.bind(TileTypeChecker);
export const isPitfall = TileTypeChecker.isPitfall.bind(TileTypeChecker);
export const isTable = TileTypeChecker.isTable.bind(TileTypeChecker);
export const isBombStatue = TileTypeChecker.isBombStatue.bind(TileTypeChecker);
export const isSpearStatue = TileTypeChecker.isSpearStatue.bind(TileTypeChecker);
export const isBowStatue = TileTypeChecker.isBowStatue.bind(TileTypeChecker);
export const isHorseStatue = TileTypeChecker.isHorseStatue.bind(TileTypeChecker);
export const isBookStatue = TileTypeChecker.isBookStatue.bind(TileTypeChecker);
export const isShovelStatue = TileTypeChecker.isShovelStatue.bind(TileTypeChecker);

// Tile category checkers
export const isWalkable = TileTypeChecker.isWalkable.bind(TileTypeChecker);
export const isItem = TileTypeChecker.isItem.bind(TileTypeChecker);
export const isChoppable = TileTypeChecker.isChoppable.bind(TileTypeChecker);
export const isBreakable = TileTypeChecker.isBreakable.bind(TileTypeChecker);

// Tile property helpers
export const getTileProperty = TileTypeChecker.getTileProperty.bind(TileTypeChecker);
export const hasTileProperty = TileTypeChecker.hasTileProperty.bind(TileTypeChecker);
export const isTileObjectOfType = TileTypeChecker.isTileObjectOfType.bind(TileTypeChecker);
export const isTileObjectWithProperty = TileTypeChecker.isTileObjectWithProperty.bind(TileTypeChecker);

// Entity type checkers
export const isPenne = EntityTypeChecker.isPenne.bind(EntityTypeChecker);
export const isSquig = EntityTypeChecker.isSquig.bind(EntityTypeChecker);
export const isNib = EntityTypeChecker.isNib.bind(EntityTypeChecker);
export const isRune = EntityTypeChecker.isRune.bind(EntityTypeChecker);
export const isCrayn = EntityTypeChecker.isCrayn.bind(EntityTypeChecker);
export const isFelt = EntityTypeChecker.isFelt.bind(EntityTypeChecker);
export const isForge = EntityTypeChecker.isForge.bind(EntityTypeChecker);
export const isMark = EntityTypeChecker.isMark.bind(EntityTypeChecker);
export const isAxolotl = EntityTypeChecker.isAxolotl.bind(EntityTypeChecker);
export const isGouge = EntityTypeChecker.isGouge.bind(EntityTypeChecker);
export const isEnemy = EntityTypeChecker.isEnemy.bind(EntityTypeChecker);
export const isLizardyStatue = EntityTypeChecker.isLizardyStatue.bind(EntityTypeChecker);
export const isLizardoStatue = EntityTypeChecker.isLizardoStatue.bind(EntityTypeChecker);
export const isLizardeauxStatue = EntityTypeChecker.isLizardeauxStatue.bind(EntityTypeChecker);
export const isZardStatue = EntityTypeChecker.isZardStatue.bind(EntityTypeChecker);
export const isLazerdStatue = EntityTypeChecker.isLazerdStatue.bind(EntityTypeChecker);
export const isLizordStatue = EntityTypeChecker.isLizordStatue.bind(EntityTypeChecker);

// Entity category checkers
export const isNPC = EntityTypeChecker.isNPC.bind(EntityTypeChecker);
export const isEnemyStatue = EntityTypeChecker.isEnemyStatue.bind(EntityTypeChecker);

// ========================================
// MIGRATION ALIASES
// ========================================

/** @deprecated Use isTileType() instead */
export function checkTileType(tile: Tile, tileType: number): boolean {
    return TileTypeChecker.isTileType(tile, tileType);
}

/** @deprecated Use isTileObject() instead */
export function isTileObj(tile: any): tile is { type: number; [key: string]: any } {
    return TileTypeChecker.isTileObject(tile);
}
