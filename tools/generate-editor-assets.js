// Script to generate zone editor asset manifest
// Run this with: node tools/generate-editor-assets.js

import { readdirSync, statSync, writeFileSync } from 'fs';
import { join, relative } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Scan directory recursively for image files
function scanDirectory(dir, baseDir, fileList = []) {
    try {
        const files = readdirSync(dir);

        files.forEach(file => {
            const filePath = join(dir, file);
            const stat = statSync(filePath);

            if (stat.isDirectory()) {
                scanDirectory(filePath, baseDir, fileList);
            } else if (/\.(png|jpg|jpeg|gif)$/i.test(file)) {
                const relativePath = relative(baseDir, filePath).replace(/\\/g, '/');
                fileList.push(relativePath);
            }
        });
    } catch (error) {
        console.warn(`Could not scan directory ${dir}:`, error.message);
    }

    return fileList;
}

// Generate the asset manifest
const assetsDir = join(__dirname, '..', 'assets');
const assets = scanDirectory(assetsDir, assetsDir);

// Categorize assets
const walls = assets.filter(a => a.startsWith('environment/walls/'));
const floors = assets.filter(a => a.startsWith('environment/floors/'));
const trim = assets.filter(a => a.startsWith('environment/trim/'));
const obstacles = assets.filter(a => a.startsWith('environment/obstacles/'));

console.log('Asset Discovery Complete:');
console.log(`  Walls: ${walls.length}`);
console.log(`  Floors: ${floors.length}`);
console.log(`  Trim: ${trim.length}`);
console.log(`  Obstacles: ${obstacles.length}`);
console.log(`  Total: ${assets.length}`);

// Generate the JavaScript file for zone editor
const output = `// Auto-generated by tools/generate-editor-assets.js
// DO NOT EDIT MANUALLY

// Wall assets discovered from environment/walls/
export const DISCOVERED_WALLS = ${JSON.stringify(walls, null, 2)};

// Floor assets discovered from environment/floors/
export const DISCOVERED_FLOORS = ${JSON.stringify(floors, null, 2)};

// Trim assets discovered from environment/trim/
export const DISCOVERED_TRIM = ${JSON.stringify(trim, null, 2)};

// Obstacle assets discovered from environment/obstacles/
export const DISCOVERED_OBSTACLES = ${JSON.stringify(obstacles, null, 2)};

// Generate tile assets mapping
export function generateTileAssets() {
    const tileAssets = {};

    // Add walls
    DISCOVERED_WALLS.forEach(path => {
        const key = 'walls/' + path.split('/').pop().replace('.png', '');
        tileAssets[key] = '../assets/' + path;
    });

    // Add floors
    DISCOVERED_FLOORS.forEach(path => {
        const key = 'floors/' + path.split('/').pop().replace('.png', '');
        tileAssets[key] = '../assets/' + path;
    });

    // Add trim
    DISCOVERED_TRIM.forEach(path => {
        const key = 'trim/' + path.split('/').pop().replace('.png', '');
        tileAssets[key] = '../assets/' + path;
    });

    // Add obstacles
    DISCOVERED_OBSTACLES.forEach(path => {
        const key = 'obstacles/' + path.split('/').pop().replace('.png', '');
        tileAssets[key] = '../assets/' + path;
    });

    return tileAssets;
}

// Generate palette arrays
export function generateWallPalette() {
    return DISCOVERED_WALLS.map(path =>
        'walls/' + path.split('/').pop().replace('.png', '')
    ).concat([null]);
}

export function generateFloorPalette() {
    return DISCOVERED_FLOORS.map(path =>
        'floors/' + path.split('/').pop().replace('.png', '')
    ).concat([null]);
}
`;

// Write to file
const outputPath = join(__dirname, 'discovered-assets.js');
writeFileSync(outputPath, output, 'utf8');

console.log(`\nGenerated: ${outputPath}`);
console.log('\nWall assets found:');
walls.forEach(w => console.log(`  - ${w}`));
